# -*- coding: utf-8 -*-
"""engr-ALDA-Fall2022-H7_HW4_Q4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R2L09G-wrhhmMLRkrKgyk39dafjXGD15

# Train, validate, and test a neural network model using the dataset in “ann 2022.zip”, which contains training data, validation data, and test data. The goal here is to train the artificial neural network to recognize hand written digits. Use the Python neural networks package, Keras (i.e. import tensorflow.keras), for this problem.

# **Q4(a)** 

## Language
  - Python 3.9
  
## Package/Library Version 
  - tensorflow (2.9.2) (CPU only)
  - matplotlib(3.2.2)
  - numpy(1.21.6)


## Installation Guide

**Install the above packages using the following commands -**

tensorflow 2.9.2 (CPU only) - pip install tensorflow

matplotlib - pip install matplotlib

numpy - pip install numpy
"""

# Commented out IPython magic to ensure Python compatibility.
from tensorflow.python.util.tf_export import InvalidSymbolNameError
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
print(np.version.version)
import math
import sys
import os
import random
import tensorflow as tf
import keras
from keras.models import Sequential
from keras.layers import Dense

from google.colab import drive

drive.mount('/content/drive')
# %matplotlib inline

#loading ann_2022 data

ann_train = pd.read_csv('/content/drive/MyDrive/ann_2022/train_data_2022.csv')
ann_test = pd.read_csv('/content/drive/MyDrive/ann_2022/test_data_2022.csv')
ann_val = pd.read_csv('/content/drive/MyDrive/ann_2022/val_data_2022.csv')

X_train = ann_train.iloc[:,:-1].to_numpy()
Y_train = ann_train.iloc[:,-1].to_numpy()
X_test = ann_test.iloc[:,:-1].to_numpy()
Y_test = ann_test.iloc[:,-1].to_numpy()
X_val = ann_val.iloc[:,:-1].to_numpy()
Y_val = ann_val.iloc[:,-1].to_numpy()

"""**(b) Please apply a fixed random seed of 2022 in order to generate the same
result every time. To do this, you will need to override the ‘PYTHONHASHSEED’
environment variable accessible via the import os. Then, write the following:
os.environ[‘PYTHONHASHSEED’]=‘2022’. You should also override the random
seed generators found in the ‘random’, ‘numpy’, and ‘tensorflow’ libraries with the
value of 2022.**
"""

os.environ['PYTHONHASHSEED']='2022'

random.seed(2022)
np.random.seed(2022)
tf.random.set_seed(2022)

"""**(c) Create a body of code that iterates over a range of possible number of hidden neurons X = (4, 16, 32, 64) that will be used to define a neural network. For each number of hidden neurons, x ∈ X, do the following:**

**i. Define a neural network with its parameters as follows: activation function for hidden layer = ‘relu’, activation for output layer = ‘sigmoid’, loss function = ‘binary crossentropy’, optimizer = ‘adam’, metrics = ‘accuracy’, epochs=5, batch size=10. The model should have a single hidden layer, with the current number of hidden neurons in the loop, x, being assigned to define the size of the single hidden layer.**
"""

def ANN (N_neurons, output_dim):
  model = Sequential()
  model.add(Dense(N_neurons, input_shape=(60,), activation = 'relu'))
  model.add(Dense(output_dim, activation = 'sigmoid'))
  model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])
  return model

"""**ii. Fit the neural network with the provided training data**"""

hidden_neurons_X = [4, 16, 32, 64]
models = [ANN(hidden_neurons_X[i], 1) for i in range(len(hidden_neurons_X))]
histories = []
for i in range (len(models)):
  print("Training Model with {} neurons in hidden layer",format(hidden_neurons_X[i]))
  history = models[i].fit(x = X_train, y= Y_train, epochs = 5, batch_size = 10, shuffle = True)
  histories.append(history)
  print()

"""**iii. Validate the neural network that has a hidden layer of size x using the given validation data. The validation accuracy is used to determine how many number of hidden neurons are optimal for this problem. You will want to save this value for later use.**"""

validation_result = []
for i in range(len(models)):
    print('Evaluating Model with {} neurons in hidden layer'.format(hidden_neurons_X[i]))
    val_result = models[i].evaluate(x=X_val, y=Y_val, batch_size=50)
    print('Mean Squared Error - {:.4f}'.format(val_result[0]))
    print('Accuracy - {:.4f}'.format(val_result[1]))
    validation_result.append(val_result)
    print()

"""**(d) Plot a figure, where the horizontal x-axis is the number of hidden neurons, and the vertical y-axis is the accuracy.**"""

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16,5))
ax[0].set_title('Hidden Number of Neurons vs Training Accuracy')
ax[0].set_ylabel('Training Accuracy')
ax[0].set_xlabel('Hidden Number of Neurons')
ax[0].bar(hidden_neurons_X,
          [histories[i].history['accuracy'][-1] for i in range(len(hidden_neurons_X))],
          width=4,
          color='blue')
for i in range(len(hidden_neurons_X)):
    ax[0].annotate('{:.4f}'.format(histories[i].history['accuracy'][-1]),
                   (hidden_neurons_X[i]-0.4, histories[i].history['accuracy'][-1]-0.05))

ax[1].set_title('Hidden Number of Neurons vs Validation Accuracy')
ax[1].set_ylabel('Validation Accuracy')
ax[1].set_xlabel('Hidden Number of Neurons')
ax[1].bar(hidden_neurons_X,
          [validation_result[i][1] for i in range(len(hidden_neurons_X))],
          width=4,
          color='yellow')
for i in range(len(hidden_neurons_X)):
    ax[1].annotate('{:.4f}'.format(validation_result[i][1]),
                   (hidden_neurons_X[i]-0.4, validation_result[i][1]-0.05))

"""**(e) Provide a simple analysis about your results and choose the optimal number of hidden neuron from the analysis.**

"""

model = models[0]

"""
**(f) Report the test accuracy using the given test data on the neural network with the optimal number of hidden neurons.**"""

print('Testing Model with 32 neurons in hidden layer')
val_result = model.evaluate(x=X_test, y=Y_test, batch_size=50)
print('Mean Squared Error - {:.4f}'.format(val_result[0]))
print('Accuracy - {:.4f}'.format(val_result[1]))
print()